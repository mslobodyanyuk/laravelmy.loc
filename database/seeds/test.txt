DB::table('tests')->insert(['id' => 6, 'active' => 1, 'title' => '5. Список скриптов (классов)', 'slug' => 'scripts', 'image' => 'hLsCiCaqizE4JgpNxjvfhMKkhodO5xJE.png', 'content' => '<p><a id="top" name="top"><a><p>\r\n\r\n<p><span style="line-height:1.6">ModeraTest(C:\\Server\\data\\htdocs\\ModeraTest)<span><p>\r\n\r\n<p>Список файлов(классов, интерфейсов), расположение в папках:<p>\r\n\r\n<p><img alt="ModeraTest.png" src="uploadsscriptsModeraTest.png" style="float:left; height:700px; width:340px" >&nbsp; &nbsp;&nbsp;<a href="#kernel">app\\Kernel\\Kernel.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; <a href="#route">app\\Route\\Route.php<a>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; <a href="#route.yml">config\\route.yml<a> &nbsp;&nbsp; &nbsp;- конфиг-файл для роутинга.<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#FileInterface">general\\File\\FileInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#File">general\\File\\File.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; <a href="#TextFileInterface">general\\File\\TextFile\\TextFileInterface.php<a><br >\r\n&nbsp; &nbsp; <a href="#TextFile">general\\File\\TextFile\\TextFile.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; <a href="#TextParserInterface">general\\Parser\\TextParserInterface.php<a><p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#TextParser">general\\Parser\\TextParser.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; public\\upl &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- папка со скопированными &nbsp; &nbsp; &nbsp; &nbsp;загруженными файлами, <a href="#write.txt">public\\upl\\write.txt<a> - файл с &nbsp;заданием.<br >\r\n&nbsp; &nbsp; <a href="#.htaccess">public\\.htaccess<a> &nbsp;&nbsp; &nbsp;- настройки доступа, файл &nbsp;дополнительной конфигурации веб-сервера Apache.<br >\r\n&nbsp; &nbsp; <a href="#app">public\\app.php<a> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- bootstrap,&nbsp;<br >\r\n&nbsp; &nbsp; <a href="#write.txt">public\\write.txt<a> &nbsp;&nbsp; &nbsp;- файл с заданием загруженный на &nbsp;сервер.&nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n&nbsp; &nbsp; <a href="#NodeInterface">src\\Composite\\NodeInterface.php<a><br >\r\n&nbsp; &nbsp; <a href="#CompositeGoods">src\\Composite\\CompositeGoods.php<a><br >\r\n&nbsp; &nbsp; <a href="#RootCompositeGoods">src\\Composite\\RootCompositeGoods.php<a><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; <a href="#IController">src\\controller\\IController.php<a><br >\r\n&nbsp; &nbsp; <a href="#IndexController">src\\controller\\IndexController.php<a><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; <a href="#FactoryInterface">src\\Factory\\FactoryInterface.php<a><br >\r\n&nbsp; &nbsp; <a href="#GoodsFactory">src\\Factory\\GoodsFactory.php<a><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; <a href="#IteratorInterface">src\\Iterator\\IteratorInterface.php<a><br >\r\n&nbsp; &nbsp; <a href="#IteratorGoods">src\\Iterator\\IteratorGoods.php<a><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; src\\view\\Index&nbsp;&nbsp; &nbsp;- папка с вьюшками &nbsp;соответствующими action(-ам) IndexController(-a):<br >\r\n&nbsp; &nbsp; <a href="#index">src\\view\\Index\\index.php<a> &nbsp;&nbsp; &nbsp; - indexAction<br >\r\n&nbsp; &nbsp; <a href="#upload">src\\view\\Index\\upload.php<a>&nbsp;&nbsp; &nbsp; - uploadAction<br >\r\n&nbsp; &nbsp; <a href="#list">src\\view\\Index\\list.php<a> &nbsp;&nbsp; &nbsp; - listAction<br >\r\n&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<p>\r\n\r\n<p><a id="kernel" name="kernel"><a><p>\r\n\r\n<p>*<p>\r\n\r\n<p>&nbsp;* Kernel - Класс kernel синглтон, в котором загружается конфиг, передается в роутер, получает данные по контроллеру,<br >\r\n&nbsp;* выполняется метод нужного контроллера, получает результат выполнения, это в init().<br >\r\n&nbsp;* Вычитавает route.yml преобразовает его в массив и передает в конструктор роутера,<br >\r\n&nbsp;* вычитка выполняется в кернеле - метод readRouteConfig($file).<br >\r\n&nbsp;*&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php">\r\n<?php\r\nnamespace app\\Kernel;\r\nuse \\Symfony\\Component\\Yaml\\Yaml;\r\nuse \\app\\Route\\Route;\r\nuse \\src\\controller;\r\n\r\n*\r\n * Kernel - Класс kernel синглтон, в котром загружается конфиг, передается в роутер, получает данные по контроллеру,\r\n * выполняется метод нужного контроллера, получает результат выполнения, это в init().\r\n * Вычитавает route.yml преобразовает его в массив и передает в конструктор роутера,\r\n * вычитка выполняется в кернеле - метод readRouteConfig($file).\r\n *\r\nfinal class Kernel{\r\n	\r\n	*\r\n	 * статическая переменная, в которой мы будем хранить экземпляр класса\r\n	 *\r\n	static $_instance; \r\n	\r\n	*\r\n	 * свойство, экземпляр класса Route\r\n	 *	\r\n	public $route;\r\n	\r\n	*\r\n	 * метод getInstance() - типичный синглтон.\r\n	 *	\r\n	public static function getInstance() { \r\n		if(!(self::$_instance instanceof self)) типичный синглтон\r\n			self::$_instance = new self();\r\n		return self::$_instance;\r\n	}\r\n	\r\n	*\r\n	 * приватный конструктор ограничивает реализацию getInstance()	\r\n	 *\r\n	private function __construct(){ конструктор закрытый private		!!!и пустой!!!	\r\n	}\r\n	\r\n	*\r\n	 * метод readRouteConfig($file) вычитавает route.yml преобразовывает его в масcив и передаёт в конструктор роутера						 			 \r\n	 *\r\n	protected function readRouteConfig($file){			 protected!!!		\r\n		 $pathes = Yaml::parse(file_get_contents($file));\r\n		 return $pathes;\r\n	}\r\n	    	\r\n	*\r\n	 * метод init($file) - инициализирует, ничего не возвращает. Инициализирует объект Роут и передаёт распарсенный массив.\r\n	 * после метода init($file) в Kernel - заполненный Route.\r\n	 *		\r\n	public function init($file) {!!!НЕ нужен ретурн!!! \r\n		$routeConfig = $this->readRouteConfig($file); 		\r\n		$this->route = new Route($routeConfig);	\r\n    }\r\n	\r\n	*\r\n	 * метод getRoute(), возвращает объект Route.		\r\n	 *\r\n	public function getRoute(){	\r\n		return $this->route;		\r\n    } \r\n				\r\n	*\r\n	 * метод process($param), в нём отрабатывает контроллер		\r\n	 * отделяет класс (src\\Controller\\IndexController) и его метод (indexAction)\r\n	 * и создаваёт $controller = new src\\Controller\\IndexController(),возвращает данные для render().\r\n	 * Нужно выполнить метод контроллера и получить от него данные и вернуть.\r\n     * $param = ['''', ''src\\Controller\\IndexController.indexAction''];\r\n	 *\r\n	public function process($param){			\r\n		$controllerData = $param[''controller''];  \r\n		$controller = new $controllerData();\r\n\r\n		$actionData = $param[''action''];\r\n\r\n		return $controller -> $actionData();\r\n	}\r\n		\r\n	*\r\n	 * метод getViewPath(), формирование пути для render()		\r\n	 *\r\n	public function getViewPath() {\r\n        return realpath( __DIR__ . ''....srcview'');\r\n	}	\r\n	\r\n	*\r\n     * метод render($routeParams, $controllerParams) выполняет отображение результата работы\r\n	 *	\r\n	public function render($routeParams, $controllerParams){ 					\r\n		$splits = explode(''\\\\'', $routeParams[''controller'']);\r\n		$path_controller = str_replace(''Controller'','''',array_pop($splits));			\r\n		$path_action = str_replace(''Action'','''',$routeParams[''action'']).''.php'';\r\n		\r\n		$path = $this->getViewPath().''\\\\''.$path_controller.''\\\\''.$path_action;\r\n		if(!file_exists($path)){\r\n			echo ''<pre> Abnormal render path: '',var_dump($path); \r\n		}\r\n		else{\r\n			include($path);			\r\n		}		\r\n	}\r\n\r\n}\r\n?><textarea>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><br >\r\n<br >\r\n<a id="route" name="route"><a><p>\r\n\r\n<p>*<br >\r\n&nbsp;* класс Route получает данные из файла -конфига, формирует пути.<br >\r\n&nbsp;*<br >\r\n&nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;\r\n<textarea name="code" class="php">\r\n<?php\r\n\r\nnamespace app\\Route;\r\n\r\n*\r\n * класс Route получает данные из файла -конфига, формирует пути.\r\n *\r\nclass Route{\r\n    *\r\n     * свойство $routeParams, массив содержит параметры роутера\r\n     *\r\n    public $routeParams;\r\n\r\n    *\r\n     * конструктор __construct(array $config) получает уже массив $config - данные из файла.  \r\n     *\r\n    public function __construct(array $config){\r\n        $this->routeParams = $config;\r\n    }\r\n\r\n    *	 \r\n     * метод match($url) (match - случать, подбирать под пару, соответствовать)\r\n     * Перебирает $this->routeParams и находит нужный параметр.\r\n     * Возвращает нужные параметры - возвращает array(''controller'' => ''контроллер'', ''action'' => ''метод'').		 \r\n     *\r\n    public function match($url){\r\n        foreach($this->routeParams as $param){\r\n            if ( $param[0] == $url ){\r\n                $controllerParams = explode(''.'', $param[1]);\r\n                return array(''controller'' => $controllerParams[0], ''action'' =>$controllerParams[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n?><textarea>\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><br >\r\n<a id="route.yml" name="route.yml"><a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*конфиг-файл для роутинга.*<p>\r\n\r\n\r\n<textarea name="code" class="php">index:  [, src\\Controller\\IndexController.indexAction]\r\nupload: [upload, src\\Controller\\IndexController.uploadAction]\r\nlist:   [list, src\\Controller\\IndexController.listAction]<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="FileInterface" name="FileInterface"><a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*Интерфейс FileInterface, general\\File\\FileInterface.php*&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace general\\File;\r\n\r\ninterface FileInterface{\r\n public function getContent(); \r\n public function setContent($content); \r\n public function removeContent();\r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br >\r\n<a id="File" name="File"><a>&nbsp;<p>\r\n\r\n<p>*<br >\r\n&nbsp;* класс File предназначен для работы с файлами.<br >\r\n&nbsp;*<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace general\\File;\r\n\r\n* \r\n * класс File предназначен для работы с файлами.\r\n *\r\nclass File implements FileInterface{\r\n\r\n	protected $pathToFile;  	\r\n	\r\n	*\r\n	 * конструктор -инициализация обьекта, передача названия файла\r\n	 *\r\n	public function __construct($path){\r\n			$this ->pathToFile = $path;\r\n	}\r\n	\r\n	*\r\n	 * геттер путь+назв файла\r\n	 *\r\n	public function getPathToFile(){					\r\n		return $this -> pathToFile;\r\n	}	\r\n	\r\n	*\r\n	 * read чтение всего файла\r\n	 *\r\n	public function getContent(){\r\n		if(!file_exists($source = $this->getPathToFile())){\r\n			return false;\r\n		}\r\n		return trim(file_get_contents($this->getPathToFile()));		 \r\n	}	\r\n	\r\n	*\r\n	 * перезапись файла  (установка данных(замена) - set-метод)\r\n	 *\r\n	public function setContent($content){ \r\n		$source = $this->getPathToFile();				\r\n		if(false === file_put_contents($source,$content)) {\r\n			throw new Exception("Can''t set content to file");\r\n		}\r\n	}\r\n	\r\n	*\r\n	 * дозапись в файл  (добавление данных - аппенд-метод)\r\n	 *\r\n	public function addLine($content){ \r\n		$source = $this->getPathToFile();				\r\n		if(false === file_put_contents($source,$content,FILE_APPEND)){\r\n			throw new Exception("Can''t add line to file");				\r\n		}\r\n	}\r\n	\r\n	*\r\n	 * очистка файла\r\n	 *\r\n	public function removeContent(){							\r\n		$source = fopen($this->getPathToFile(), "w");		\r\n		fclose($source);\r\n	}\r\n	\r\n}\r\n?><textarea>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><a id="TextFileInterface" name="TextFileInterface"><a><p>\r\n\r\n<p>&nbsp;<p>\r\n\r\n<p>*Интерфейс TextFileInterface, general\\File\\TextFile\\TextFileInterface.php* &nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace general\\File\\TextFile;\r\n\r\nuse general\\File as F;\r\n\r\ninterface TextFileInterface extends F\\FileInterface{\r\n	 public function getAllLines();\r\n	 public function getCountLines();\r\n} \r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<br >\r\n<a id="TextFile" name="TextFile"><a>&nbsp;<p>\r\n\r\n<p>*<br >\r\n&nbsp;* класс TextFile предназначен для работы с текстовыми файлами.<br >\r\n&nbsp;*<br >\r\n<p>\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace general\\File\\TextFile;\r\n\r\n use general\\File as F;\r\n \r\n* \r\n * класс TextFile предназначен для работы с текстовыми файлами.\r\n *\r\n class TextFile extends F\\File implements TextFileInterface{\r\n	*\r\n	 * описание(как минимум) абстрактных методов интерфейса \r\n	 *\r\n	public function getContent(){} \r\n	public function setContent($content){} \r\n	public function removeContent(){}\r\n	\r\n	*\r\n	 * конструктор -инициализация обьекта, передача названия файла\r\n	 *\r\n	public function __construct($path){\r\n			$this ->pathToFile = $path;\r\n	}\r\n	\r\n	*\r\n	 * геттер путь+назв файла\r\n	 *\r\n	public function getPathToFile(){					\r\n		return $this -> pathToFile;\r\n	}\r\n	\r\n	*\r\n	 * readLine чтение файла построчно	\r\n	 *\r\n	public function getAllLines(){				\r\n		$textLines[] = file($this->getPathToFile());\r\n		return $textLines;			\r\n	}\r\n	\r\n	*\r\n	 * кол-во строк файла\r\n	 *\r\n	public function getCountLines(){							\r\n		$CountLines = count(file($this->getPathToFile()));						\r\n		return $CountLines;			\r\n	}\r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="TextParserInterface" name="TextParserInterface"><a>&nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*Интерфейс TextParserInterface, general\\Parser\\TextParserInterface.php*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace general\\Parser;\r\n\r\ninterface TextParserInterface{\r\n	public function parse($text);\r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br >\r\n<a id="TextParser" name="TextParser"><a><p>\r\n<p>*<br >\r\n&nbsp;* класс TextParser - преобразование данных(из текста в массив).<br >\r\n&nbsp;*<br >\r\n<p>\r\n<br >\r\n<textarea name="code" class="php"><?php\r\n\r\nnamespace general\\Parser;	\r\n\r\n*\r\n * класс TextParser - преобразование данных(из текста в массив).\r\n *	\r\nclass TextParser implements TextParserInterface{\r\n	\r\n	*\r\n	 * метод parse($text) преобразует текст в массив, результат = массив из 12и эл-тов(массивов строк), в которых по 3 эл-та.  \r\n	 *\r\n	public function parse($text){	\r\n		$lines4Parse = preg_split(''\\n'',$text);\r\n		\r\n		foreach($lines4Parse as $v){	\r\n			$parsedLine = '''';			\r\n			list($nodeId,$parentId,$nodeName) = explode("|", $v);			node_id | parent_id | node_name\r\n			$parsedLine["nodeId"] = $nodeId;\r\n			$parsedLine["parentId"] = $parentId;\r\n			$parsedLine["nodeName"] = $nodeName;\r\n			\r\n			$parsedData[] = $parsedLine;												\r\n		}			\r\n		return $parsedData;\r\n	}					\r\n}\r\n\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;<br >\r\n&nbsp;<br >\r\n<a id="write.txt" name="write.txt"><a>&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*public\\upl &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- папка со скопированными загруженными файлами, public\\upl\\write.txt - файл с заданием.*<br >\r\n\r\n<textarea name="code" class="php">1 | 0 | Электроника\r\n2 | 0 | Видео\r\n3 | 0 | Фото\r\n4 | 1 | MP3-плеер\r\n5 | 1 | ТВ\r\n6 | 4 | Ipod\r\n7 | 6 | Shuffle\r\n8 | 3 | SLR\r\n9 | 8 | DSLR\r\n10 | 9 | Nikon\r\n11 | 9 | Canon\r\n12 | 11 | 20D<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><br >\r\n<a id=".htaccess" name=".htaccess"><a>&nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*public\\.htaccess &nbsp;&nbsp; &nbsp;- настройки доступа, файл дополнительной конфигурации веб-сервера Apache.*<p>\r\n\r\n\r\n<textarea name="code" class="php">AddDefaultCharset utf-8#windows-1251\r\n<IfModule mod_rewrite.c>\r\n    RewriteEngine On\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n   RewriteRule ^(.*)$ app.php [QSA,L]   \r\n<IfModule><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><a id="app" name="app"><a>&nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*public\\app.php &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- bootstrap, *<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nrequire __DIR__ . ''..vendorautoload.php'';\r\nuse \\app\\Kernel\\Kernel;\r\nuse \\src\\controller;\r\n\r\nspl_autoload_register(\r\n    function($class){\r\n        $path = realpath (__DIR__ . ''..''.str_replace("\\\\","",$class.".php"));\r\n		if(!file_exists($path)){\r\n			echo  ''Path abnormal: '',$path;\r\n		}\r\n		else{\r\n			require_once $path;\r\n		}		\r\n    }\r\n);\r\n\r\n$kernel = Kernel::getInstance();\r\n$file = __DIR__ . ''..configroute.yml'';\r\n$kernel->init($file);\r\n\r\n$route = $kernel->getRoute();\r\n$url = $_SERVER[''REQUEST_URI''];\r\n$routeParams = $route->match($url);\r\n$controllerParams = $kernel->process($routeParams);\r\n$kernel->render($routeParams, $controllerParams); \r\n\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="write.txt" name="write.txt"><a>&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*public\\write.txt &nbsp;&nbsp; &nbsp;- файл с заданием загруженный на сервер.*<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href="#write.txt">см. public\\upl\\write.txt - файл с заданием<a><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><a id="NodeInterface" name="NodeInterface"><a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*Интерфейс NodeInterface, src\\Composite\\NodeInterface.php*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Composite;\r\n\r\ninterface NodeInterface{	\r\n	public function getId();\r\n	public function getName();\r\n	public function addChild(NodeInterface $node);\r\n	public function getChildren();	\r\n	public function getDataToPrint($hyphen);	\r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="CompositeGoods" name="CompositeGoods"><a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*<br >\r\n&nbsp;*&nbsp;класс CompositeGoods (Компоновщик),компоновщик(по айди выстраивает ветки(children,дети))<br>\r\n&nbsp;*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Composite;\r\n\r\n* \r\n * класс Composite (Компоновщик),компоновщик(по айди выстраивает ветки(children,дети))\r\n * Компоновщик - и есть дерево, он хранит данные.\r\n *		node_id | parent_id | node_name\r\n *		node_id: числовой идентификатор узла\r\n *		parent_id: идентификатор родительского узла\r\n * Элементы Cоmposite создает Factory.\r\n * Composite - структура(коллекция) элементов(данных, нод) в виде дерева.\r\n * Компоновщик (англ. Composite pattern) — структурный шаблон проектирования,\r\n * относится к структурным паттернам, объединяет объекты в древовидную структуру\r\n * для представления иерархии от частного к целому. \r\n * Компоновщик позволяет клиентам обращаться к отдельным объектам и к группам объектов одинаково.\r\n *\r\nclass CompositeGoods implements NodeInterface{\r\n	private $id;\r\n	private $name;  \r\n	private $children = array();  private т.к. мы используем только ветки.\r\n\r\n	public function __construct($id,$name){\r\n		$this->id = $id;\r\n		$this->name = $name;\r\n	}		\r\n	\r\n	*\r\n	 * возвращает id узла(ветки)\r\n	 *\r\n	public function getId(){					\r\n		return $this->id; \r\n	}\r\n	\r\n	*\r\n	 * возвращает имя узла(ветки)\r\n	 *\r\n	public function getName(){\r\n		return $this->name; \r\n	}\r\n	\r\n	*\r\n	 *	возвращает потомков $node  \r\n	 * \r\n	public function getChildren(){		\r\n		return $this -> children;\r\n	}\r\n		\r\n	*\r\n	 * добавляет ветку(узел), $node \r\n	 *\r\n	public function addChild(NodeInterface $node){\r\n		$this->children[] = $node;\r\n	}			\r\n	\r\n	*\r\n	 * выводит дерево на экран\r\n	 *\r\n	public function display(){				\r\n		print($this->id)." ".($this->name)."<br>";	\r\n		foreach($this->children as $child){			\r\n			$child->display();\r\n		}		\r\n	}\r\n		\r\n	*\r\n	 * возвращает одномерный массив данных для вывода на экран.\r\n	 *		\r\n	public function getDataToPrint($hyphen = ''''){\r\n		$hyphen .= '' - '';\r\n		$dataToPrint = array($hyphen.$this->name);\r\n		\r\n		foreach ($this->children as $child){   \r\n			$dataToPrint = array_merge($dataToPrint, $child->getDataToPrint($hyphen));\r\n		}\r\n\r\n		return $dataToPrint;\r\n	}\r\n	\r\n} \r\n?><textarea>\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br >\r\n<a id="RootCompositeGoods" name="RootCompositeGoods"><a><p>\r\n\r\n<p>*<br >\r\n&nbsp;* класс RootCompositeGoods. Этот класс в себе должен содержать итератор.<br >\r\n&nbsp;*<br >\r\n\r\n<textarea name="code" class="php"><?php\r\n\r\nnamespace src\\Composite;\r\nuse src\\Iterator as I; \r\n\r\n*\r\n * класс RootCompositeGoods. Этот класс в себе должен содержать итератор.\r\n *\r\nclass RootCompositeGoods extends CompositeGoods{\r\n	protected $iterator;\r\n	\r\n	*\r\n	 * метод getIterator(), возвращает итератор, экземпляр класса IteratorGoods.\r\n	 *\r\n	public function getIterator() {\r\n		return $this->iterator ? $this->iterator : $this->iterator = new I\\IteratorGoods($this);\r\n	}\r\n\r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;<p>\r\n\r\n<p><a id="IController" name="IController"><a>&nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*Интерфейс IController, src\\controller\\IController.php*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\controller;\r\n\r\ninterface IController {\r\npublic function indexAction();\r\npublic function uploadAction();\r\npublic function listAction();\r\n}<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p><br >\r\n<br >\r\n<a id="IndexController" name="IndexController"><a><p>\r\n\r\n<p>*<br >\r\n&nbsp;* класс IndexController, контроллер выполняет Action(-ы) в соответствии с адресной строкой.<br >\r\n&nbsp;*<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\controller;\r\n\r\nuse general as G;		\r\nuse src\\Factory as F;\r\nuse src\\Composite as C;\r\n\r\n*\r\n * класс IndexController, контроллер выполняет Action(-ы) в соответствии с адресной строкой.\r\n *\r\nclass IndexController implements IController {\r\n	\r\n	*\r\n     * метод(Action) контроллера indexAction(), выполняется по -умолчанию\r\n	 * при указании в адресной строке http:modera_test.loc, вьюшка index.php \r\n	 *\r\n	public function indexAction() {\r\n	}	\r\n		\r\n	*\r\n     * метод(Action) контроллера uploadAction(), загрузка файла на сервер,\r\n	 * обработка контента, передача параметров в listAction(), \r\n	 * выполняется при указании в адресной строке http:modera_test.locupload, вьюшка upload.php\r\n	 *\r\n	public function uploadAction() {					\r\n\r\n		if (is_uploaded_file($_FILES[''uploadfile''][''tmp_name''])) { \r\n			$uploadfile = $_SERVER[''DOCUMENT_ROOT''].''upl''.basename($_FILES[''uploadfile''][''name'']);\r\n			copy($_FILES[''uploadfile''][''tmp_name''], $uploadfile);\r\n \r\n			if (!$handle = fopen($uploadfile, ''a'')){\r\n				echo "Can''t open file($uploadfile)";\r\n				exit;\r\n			}\r\n					\r\n			$params[''success''] = true;\r\n			$params[''filename''] = $uploadfile;				\r\n										\r\n			$file = new G\\File\\File($params[''filename'']);\r\n			$params[''size''] = filesize($params[''filename'']);\r\n			$text = $file->getContent();	\r\n			$params[''text''] = $text;\r\n						\r\n			$file = new G\\File\\TextFile\\TextFile($params[''filename'']);			\r\n			$countlines = $file -> getCountLines();										\r\n			$params[''cnt''] = $countlines; 			\r\n		}\r\n		else{\r\n			$params[''success''] = false;\r\n		}	\r\n		return  $params;\r\n	}\r\n	\r\n	*\r\n	 * метод(Action) контроллера listAction(), распарсивание контента в массив,\r\n	 * выполняется при указании в адресной строке http:modera_test.loclist, вывод результата - вьюшка list.php\r\n	 *	\r\n	public function listAction() { \r\n		$path = $_SERVER[''DOCUMENT_ROOT''].''upl'';			\r\n		if ($handle = opendir($path)) {		\r\n			while (false !== ($file = readdir($handle))) { \r\n				if ($file != "." && $file != "..") { 				\r\n					$path = $_SERVER[''DOCUMENT_ROOT''].''upl''.$file;		\r\n				} \r\n			}\r\n		}\r\n		closedir($handle); 			\r\n						\r\n		$file = new G\\File\\File($path);\r\n		$text = $file->getContent();		\r\n\r\n		*PARSE DATA*		\r\n		$parser = new G\\Parser\\TextParser();\r\n		$dataArray = $parser->parse($text); 		\r\n		*PARSE DATA*		\r\n\r\n***********Create a tree structure******************************\r\n		$factory = new F\\GoodsFactory();\r\n		отсортировать массив с данными так, чтоб корневые ветви были первые.\r\n	    usort($dataArray, create_function(''$a,$b'',''if ((int)$a["parentId"]===(int)$b["parentId"]) return 0;\r\n	     return (int)$a["parentId"]>(int)$b["parentId"] ? 1 : -1;''));\r\n        cоздать основной узел через фабрику.\r\n		$root = $factory->createRoot(array(''nodeId''=>0, ''nodeName''=>''root''));		\r\n		собрать дерево\r\n		foreach($dataArray as $data) {\r\n			$iterator = $root->getIterator();		\r\n			$iterator->seek($data[''parentId'']);			\r\n			$parent = $iterator->current();				\r\n			$item = $factory->create($data);			\r\n			$parent->addChild($item);		\r\n		}	\r\n***********Create a tree structure******************************		\r\n		$params[0] = $dataArray;\r\n		$params[1] = $root->getDataToPrint();		\r\n		return $params;\r\n	}\r\n	\r\n}<textarea>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="FactoryInterface" name="FactoryInterface">&nbsp;<a> &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*Интерфейс FactoryInterface, src\\Factory\\FactoryInterface.php*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Factory;\r\n\r\ninterface FactoryInterface{							\r\n    public function create(array $params); \r\n	public function createRoot(array $params); \r\n} \r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<br >\r\n<a id="GoodsFactory" name="GoodsFactory"><a><p>\r\n\r\n<p>*<br >\r\n&nbsp;* GoodsFactory создает элементы Cоmposite. Фабрика создает ноды(ветки), по одной.<br >\r\n&nbsp;*&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Factory; \r\n\r\nuse src\\Composite as C;\r\nuse src\\Iterator as I;\r\n\r\n*\r\n * Factory создает элементы Cоmposite. Фабрика создает ноды(ветки), по одной.\r\n *\r\nclass GoodsFactory implements FactoryInterface{\r\n\r\n	*\r\n	 * метод create(array $params) создаёт композит. $params - это данные из файла, строки.\r\n	 *\r\n	public function create(array $params) {\r\n		return new C\\CompositeGoods($params[''nodeId''],$params[''nodeName'']);  \r\n	}\r\n	\r\n	*\r\n	 * метод createRoot(array $params) создаёт композит. $params - это данные для создания корня композиции.\r\n	 *\r\n	public function createRoot(array $params) {\r\n		return new C\\RootCompositeGoods($params[''nodeId''],$params[''nodeName'']);  \r\n	}	\r\n	\r\n}\r\n \r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt; &nbsp;<br >\r\n&nbsp;<br >\r\n&nbsp;<br >\r\n<a id="IteratorInterface" name="IteratorInterface"><a><p>\r\n\r\n<p><br >\r\n*Интерфейс IteratorInterface, src\\Iterator\\IteratorInterface.php*&nbsp;&nbsp; &nbsp;<p>\r\n\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Iterator; \r\ninterface IteratorInterface\r\n{\r\n  **\r\n   * Seek position \r\n   *\r\n   public function seek($index); \r\n\r\n **\r\n   * Return current composite element entry \r\n   *\r\n   public function current();\r\n  \r\n **\r\n   * Return next composite element \r\n   *\r\n   public function next();\r\n \r\n}\r\n?><textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n<a id="IteratorGoods" name="IteratorGoods"><a><p>\r\n\r\n<p>*<br >\r\n&nbsp;* Итератор -класс абстрагирующий за единым интерфейсом доступ к элементам коллекции.<br >\r\n&nbsp;*&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n\r\n<textarea name="code" class="php"><?php\r\nnamespace src\\Iterator;\r\n*\r\n * Итератор -класс абстрагирующий за единым интерфейсом доступ к элементам коллекции.\r\n *\r\nclass IteratorGoods implements IteratorInterFace{\r\n    **\r\n     * @var NodeInterface\r\n     *\r\n    protected $current;\r\n\r\n    **\r\n     * @var NodeInterface\r\n     *\r\n    protected $root;\r\n    public function __construct($root)\r\n    {\r\n        $this->root = $root;\r\n        $this->current = $root;\r\n    }\r\n\r\n    **\r\n     * @param NodeInterface[] $children\r\n     * @param integer         $index\r\n     *\r\n     * @return null|NodeInterface\r\n     *  \r\n    private function find(array $children, $index)\r\n    {\r\n        foreach ($children as $childNode) {\r\n            if ((int)$childNode->getId() == $index) { !!! (int)\r\n                return $childNode;\r\n            }			\r\n            $node = $this->find($childNode->getChildren(), $index);\r\n            if ($node) {\r\n                return $node;\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    **\r\n     * @param $index\r\n     *\r\n     *\r\n    public function seek($index){       \r\n		if ((int)$this->root->getId() == $index){ !!! (int) \r\n			$this->current = $this->root;\r\n			return;\r\n		}\r\n				\r\n		$node = $this->find($this->root->getChildren(), $index);\r\n        if (!$node) {							\r\n		   echo "Can''t find element ".$index;\r\n        }\r\n        $this->current = $node;		\r\n				\r\n    }\r\n\r\n    **\r\n     * @return NodeInterface\r\n     *\r\n    public function current(){\r\n        return $this->current;\r\n    }\r\n\r\n    public function next(){\r\n        $index = $this->current->getId() + 1;\r\n        $node = $this->find($this->root->getChildren(), $index);\r\n        if ($node) {\r\n            $this->current = $node;\r\n        }\r\n    }\r\n}<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><br >\r\n<a id="index" name="index"><a>&nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br >\r\n*index - по -умолчанию<br >\r\nViewFileProcessindex.php - отображает результат метода index в контроллере &nbsp;FileProcessController*<br >\r\n<textarea name="code" class="php"><h1>\r\n<?php header(''Content-Type: texthtml; charset=utf-8''); \r\n*index - по -умолчанию\r\nViewFileProcessindex.php - отображает результат метода index в контроллере  FileProcessController*\r\n?>Welcome to test program!!!\r\n<h1>\r\n\r\n<form action="upload" method="post" enctype="multipartform-data">\r\n	<input type="file" name="uploadfile">\r\n	<input type="submit" value="Загрузить">\r\n<form>	<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="upload" name="upload"><a>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br >\r\n*ViewFileProcessupload.php<br >\r\nupload - для загрузки файла, upload - обработка post запроса, upload - обработка запроса загрузки файла*<br >\r\n<textarea name="code" class="php"><?php\r\n*ViewFileProcessupload.php\r\nupload - для загрузки файла, upload - обработка post запроса\r\nupload - обработка запроса загрузки файла*\r\nheader(''Content-Type: texthtml; charset=utf-8''); \r\nrequire_once "..\\src\\controller\\IndexController.php";	\r\n	$params = $controllerParams;\r\n	if($params[''success'']){\r\n		echo ''я -вьюшка upload.php<br ><h2>File '',$params[''filename''],'' succesfully loaded:<h2>'',\r\n						"Data successfully written to the file(".$params[''filename''].")!<br >",\r\n						''filesize - ''.$params["size"].'' bytes<br >'',\r\n						''count lines - ''.$params["cnt"];											\r\n		$all="\\r\\n"."<h2>Tree structure from file(".$params[''filename'']."):<h2>\\r\\n";\r\n		echo "<br >".$all,"<pre>",$params[''text''],"<pre>","<hr>";			\r\n	}\r\n	else{\r\n		echo "<h2>File ", $params[''filename'']," NOT loaded<h2>";\r\n	}	\r\n\r\n?>\r\n<form action="list" method="post" enctype="multipartform-data">\r\n<input type="submit" value="PARSE DATA">\r\n<textarea>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<br >\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br >\r\n<a id="list" name="list"><a>&nbsp;&nbsp;<p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br >\r\n*list - отображение результата&nbsp;&nbsp; &nbsp;ViewFileProcesslist.php*<br >\r\n<textarea name="code" class="php"><?php\r\n*list - отображение результата	\r\nViewFileProcesslist.php*\r\nheader(''Content-Type: texthtml; charset=utf-8''); \r\nuse src\\Factory as F;	\r\nrequire_once "..\\src\\controller\\IndexController.php";	\r\n$params = $controllerParams;\r\necho "я вьюшка list.php",''<br ><h2>Parsed data: <h2>'',"<pre>",print_r($params[0]),"<pre>","<hr>",		\r\n	 "<h2>Tree structure:<h2>","<pre>",print_r($params[1]),"<pre>";		\r\n?><textarea>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&lt;&lt;&nbsp;<a href="#top">Вначало<a>&nbsp;||&nbsp;<a href="#end">вконец<a>&nbsp;&gt;&gt;<p>\r\n\r\n<p><a id="end" name="end"><a><p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#kernel">app\\Kernel\\Kernel.php<a><p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#route">app\\Route\\Route.php<a>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#route.yml">config\\route.yml<a>&nbsp;&nbsp;&nbsp; &nbsp;- конфиг-файл для роутинга.<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#FileInterface">general\\File\\FileInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#File">general\\File\\File.php<a>&nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#TextFileInterface">general\\File\\TextFile\\TextFileInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#TextFile">general\\File\\TextFile\\TextFile.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; <a href="#TextParserInterface">general\\Parser\\TextParserInterface.php<a><p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#TextParser">general\\Parser\\TextParser.php<a><p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;public\\upl &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- папка со скопированными &nbsp; &nbsp; &nbsp; &nbsp;загруженными файлами,&nbsp;<a href="#write.txt">public\\upl\\write.txt<a>&nbsp;- файл с &nbsp;заданием.<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#.htaccess">public\\.htaccess<a>&nbsp;&nbsp;&nbsp; &nbsp;- настройки доступа, файл &nbsp;дополнительной конфигурации веб-сервера Apache.<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#app">public\\app.php<a>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;- bootstrap,&nbsp;<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#write.txt">public\\write.txt<a>&nbsp;&nbsp;&nbsp; &nbsp;- файл с заданием загруженный на &nbsp;сервер.&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#NodeInterface">src\\Composite\\NodeInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#CompositeGoods">src\\Composite\\CompositeGoods.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#RootCompositeGoods">src\\Composite\\RootCompositeGoods.php<a><p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;<a href="#IController">src\\controller\\IController.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#IndexController">src\\controller\\IndexController.php<a>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#FactoryInterface">src\\Factory\\FactoryInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#GoodsFactory">src\\Factory\\GoodsFactory.php<a>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<a href="#IteratorInterface">src\\Iterator\\IteratorInterface.php<a><br >\r\n&nbsp; &nbsp;&nbsp;<a href="#IteratorGoods">src\\Iterator\\IteratorGoods.php<a><p>\r\n\r\n<p>&nbsp; &nbsp; src\\view\\Index&nbsp;&nbsp; &nbsp;- папка с вьюшками &nbsp;соответствующими action(-ам) IndexController(-a):<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#index">src\\view\\Index\\index.php<a>&nbsp;&nbsp;&nbsp; &nbsp; - indexAction<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#upload">src\\view\\Index\\upload.php<a>&nbsp;&nbsp; &nbsp; - uploadAction<br >\r\n&nbsp; &nbsp;&nbsp;<a href="#list">src\\view\\Index\\list.php<a>&nbsp;&nbsp;&nbsp; &nbsp; - listAction<p>\r\n', 'created_at' => '2015-08-26 05:36:01', 'updated_at' => '2015-10-13 15:45:20']);
	
